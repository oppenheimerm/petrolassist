@page "/petrolstations"
@using PA.Web.Admin.Helpers
@using PA.Core.Helpers.Paging
@using PA.Web.Admin.Shared

<PageTitle>Petrol Stations</PageTitle>


<!--
Blazor provides a preconfigured HttpClient through dependency injection
that is already setup with the correct base address. Use the inject
directive to inject an HttpClient into the Index component.
-->
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager;
@inject IConfiguration Configuration;


<!--
	to enable console.log output
-->
@inject IJSRuntime JSRuntime;
@inject IConfiguration Configuration;



@code {

	List<Station>? Stations { get; set; }
	bool showEditStationDialog;
	bool showAddNewStationdialog;
	Station? thisStation;
	Station? newStation;
	StationSortOrder CurrentSortOrder = StationSortOrder.Id;
	MetaData? StationsMetaData;
	bool ProcessingGetRequest = false;
	PagingParameters pagingParameters = new() { PageSize = 8, PageNumber = 1 };


	//  Since a Blazor Server app is usually prerendering, JavaScript is not yet available, so you have to wait
	//  until your app is rendered, and only then call JavaScript functions.
	//
	//  See: protected override async Task OnAfterRenderAsync(bool firstRender)
	bool preRenderRun = false;


	protected override async Task OnInitializedAsync()
	{
		await GetStationsAsync(1, pagingParameters, CurrentSortOrder);
	}

	//	https://stackoverflow.com/questions/61438796/javascript-interop-error-when-calling-javascript-from-oninitializedasync-blazor

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JSRuntime.InvokeVoidAsync("initMap", Configuration["GoogleServices:ApiKey"]);
			StateHasChanged();
			preRenderRun = true;
		}

	}


	/// <summary>
	/// Helper method to write to browser console
	/// </summary>
	/// <param name="message"></param>
	public async void ConsoleLog(string message)
	{
		await JSRuntime.InvokeVoidAsync("console.log", message);
	}

	private void CloseEditStationDialog()
	{
		thisStation = null;
		showEditStationDialog = false;
		//ConsoleLog("CloseEditStationDialog() called! ");
	}

	void ShowEditStationDialog(Station station)
	{
		thisStation = station;
		showEditStationDialog = true;
	}

	void ShowAddNewStationDialog()
	{
		if (preRenderRun)
		{
			newStation = new Station();
			showAddNewStationdialog = true;
		}
		else
		{
			return;
		}
	}

	public void CloseAddnewStationDialog()
	{
		showAddNewStationdialog = false;
	}

	//	https://code-maze.com/blazor-webassembly-pagination/
	private async Task SelectedPage(int page)
	{
		pagingParameters.PageNumber = page;
		await GetStationsAsync(page, pagingParameters, CurrentSortOrder);
	}


	//	https://code-maze.com/blazor-webassembly-pagination/
	private async Task GetStationsAsync(int page, PagingParameters pagingParameters, StationSortOrder stationSortOrder)
	{
		if (ProcessingGetRequest == false)
		{
			var sortBy = PaginHelpers.GetStationSortOrderAsInt(stationSortOrder);
			ProcessingGetRequest = true;
			pagingParameters.PageNumber = page;

			var stationsRequest = await HttpClient.GetFromJsonAsync<PagingResponse<Station>>($"{NavigationManager?.BaseUri}api/stations/all?countryCode=&sortingOrder={sortBy}&pageNumber={pagingParameters.PageNumber}&pageSize={pagingParameters.PageSize}");
			StationsMetaData = stationsRequest.MetaData;
			Stations = stationsRequest.Items;
			ProcessingGetRequest = false;
		}

	}

	async Task SortTable(StationSortOrder stationSortOrder)
	{
		//Console.WriteLine($"Current page: {pagingParameters.PageNumber.ToString()} and sortby: { stationSortOrder.ToString() }");
		Stations = null;
		await GetStationsAsync(pagingParameters.PageNumber, pagingParameters, stationSortOrder);
	}


}

<div class="stations">

	<input type="hidden" id="mapHolder" />

	<div class="table-wrap">
		<div class="table-head">
			<div class="tbl-head-inner">
				<span class="table-title">Stations</span>
				<button class="@((preRenderRun == true)? "btn btn-default btn-primary" :"btn btn-default btn-disabled")" @onclick="@(() => ShowAddNewStationDialog())">Add a new Station</button>
			</div>
	</div>

	@if (Stations == null)
	{
		<h1>LOADING...</h1>
	}
	else
	{
		/*
		Use simple paging
		https://www.c-sharpcorner.com/UploadFile/4b0136/perform-paging-searching-sorting-in-Asp-Net-mvc-5/
		*/

		<table class="std-table">
			<thead>
				<tr>
					<th>
						Id
					</th>
						<th class="col-sortable" @onclick="@( () => SortTable(StationSortOrder.StationName))">Name</th>
					<th>PostCode</th>
					<th>Added</th>
					<th>Logo</th>
					<th>Station Online</th>
					<th>Actions</th>

				</tr>
			</thead>
			<tbody>
				@foreach (var item in Stations)
				{
					<tr>
						<td>
							@item.Id
						</td>
						<td>
							@StringHelpers.ShortenAndFormatText(item.StationName, 20)
						</td>
						<td>@item.StationPostcode</td>
						<td>@item.Added.Value.ToString("yyyy-MM-dd", CultureInfo.CreateSpecificCulture("en-GB"))</td>
						<td>
							<img class="tbl-img-logo" src="@StringHelpers.GetVendorLogo(@item.Vendor.VendorLogo, VendorLogoSize.Small) " />
						</td>
						<td class="center-col">
							@if (@item.StationOnline)
							{
								<span class="material-symbols-sharp">
									done
								</span>
							}
							else
							{
								<span class="material-symbols-sharp">
									close
								</span>
							}
						</td>
						<td>
							<div class="table-actions-wrap">
								<button class="btn btn-default btn-primary btn-icon" @onclick="@( () => ShowEditStationDialog(item))">
									<span class="material-symbols-sharp">
										visibility
									</span>
								</button>
								<button class="btn btn-default btn-warning btn-icon">
									<span class="material-symbols-sharp">
										delete
									</span>
								</button>
							</div>
						</td>

					</tr>
				}
			</tbody>
		</table>

		<Pagination MetaData="@StationsMetaData" Spread="2" SelectedPage="@SelectedPage" />
	}


</div>



<!--
	The ModalDialog is styled to overlay the current page, so it doesn't really matter
	where you put this code block.
-->
@if (showEditStationDialog)
{
	<ViewStationDialog Station="@thisStation" OnCloseDialogClickCallback="@CloseEditStationDialog">
	</ViewStationDialog>

}

@if (showAddNewStationdialog)
{
	<AddStationDialog OnCloseDialogClickCallback="@CloseAddnewStationDialog" NewStation="newStation">

	</AddStationDialog>
}

</div>