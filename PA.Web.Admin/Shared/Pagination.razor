@using PA.Web.Admin.Helpers.Paging

@code {
    [Parameter]
    public MetaData? MetaData { get; set; }
    //  Property to configure the number of page buttons (links) that will show
    //  before and after the currently selected page in the pagination component.
    //  https://code-maze.com/blazor-webassembly-pagination/
    [Parameter]
    public int? Spread { get; set; }
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    private List<PagingLink>? _links;

    // OnParametersSet is another component lifecycle method, and it fires when
    // the component is first instantiated and any time its parameters change value.
    protected override void OnParametersSet()
    {
        CreatePaginationLinks();
    }

    /// <summary>
    /// Create a new _links variable that will hold all the links for our pagination component. As soon as
    //  our parameters get their values, the OnParameterSet lifecycle method will run and call the
    //  CreatePaginationLinks method. In that method, we create the Previous link, the page number links with
    //  the Active property set to true for the current page and the Next link. Additionally, we have the
    //  OnSelectedPage method.
    /// </summary>
    /// <param name="link"></param>
    /// <returns></returns>
    private void CreatePaginationLinks()
    {
        _links = new List<PagingLink>();
        _links.Add(new PagingLink(MetaData.CurrentPage - 1, MetaData.HasPrevious, "<"));
        for (int i = 1; i <= MetaData.TotalPages; i++)
        {
            if (i >= MetaData.CurrentPage - Spread && i <= MetaData.CurrentPage + Spread)
            {
                _links.Add(new PagingLink(i, true, i.ToString()) { Active = MetaData.CurrentPage == i });
            }
        }
        _links.Add(new PagingLink(MetaData.CurrentPage + 1, MetaData.HasNext, ">"));
    }

    private async Task OnSelectedPage(PagingLink link)
    {
        if (link.Page == MetaData.CurrentPage || !link.Enabled)
            return;
        MetaData.CurrentPage = link.Page;
        await SelectedPage.InvokeAsync(link.Page);
    }
}

<div class="pagination-wrap">

    <nav aria-label="Page navigation">
        <ul class="pagination">
            @foreach (var link in _links)
            {
                <li @onclick="() => OnSelectedPage(link)" class="page-item @(link.Enabled ? null : "disabled") @(link.Active ? "active" : null)">
                    <span class="page-link" href="#">@link.Text</span>
                </li>
            }
        </ul>
    </nav>
</div>
